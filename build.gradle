plugins {
	id 'java-library'
	id 'maven-publish'
	id 'net.neoforged.gradle.userdev' version '7.0.116'
	id "com.hypherionmc.modutils.modpublisher" version "2.1.1"
	id 'idea'
}

apply from: 'optimization_utils.gradle'

repositories {
	mavenLocal()
	maven {
		name "AnonymousHacker1279"
		url "https://maven.anonymoushacker1279.tech/releases"
	}
}

version = mod_version
group = mod_group_id

base {
	archivesName = project.mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')

sourceSets {
	main {
		resources {
			// Include resources generated by data generators.
			srcDirs += "src/generated/resources"
		}
	}

	test {
		java {
			srcDir 'src/test/java'
		}
	}
}

runs {
	configureEach {
		systemProperty 'forge.logging.markers', 'REGISTRIES'
		systemProperty 'forge.logging.console.level', 'debug'

		jvmArguments.addAll '-Xmx6G'

		// If the selected toolchain is a JBR, enable DCEVM for improved hotswapping
		if (it.project.javaToolchains.launcherFor(java.toolchain).map { it.metadata.vendor }.getOrElse("").contains("JetBrains")) {
			jvmArguments.addAll '-XX:+AllowEnhancedClassRedefinition'
		}

		modSources project.sourceSets.main, project.sourceSets.test
	}

	client {

		// Setup client information from gradle.properties in the user home
		// All of these are optional
		if (project.hasProperty('mc_uuid')) {
			programArguments('--uuid', (String) project.property('mc_uuid'))
		}
		if (project.hasProperty('mc_username')) {
			programArguments('--username', (String) project.property('mc_username'))
		}
		if (project.hasProperty('mc_accessToken')) {
			programArguments('--accessToken', (String) project.property('mc_accessToken'))
		}
	}

	server {
		programArgument '--nogui'
	}
}

dependencies {
	implementation 'org.jetbrains:annotations:24.0.1'

	implementation "net.neoforged:neoforge:${neoforge_version}"
}

tasks.named('processResources', ProcessResources).configure {
	def replaceProperties = [
			minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
			neoforge_version    : neoforge_version, neoforge_version_range: neoforge_version_range,
			loader_version_range: loader_version_range, mod_version: mod_version
	]
	inputs.properties replaceProperties

	filesMatching(['META-INF/neoforge.mods.toml']) {
		expand replaceProperties + [project: project]
	}

	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

java {
	withSourcesJar()
	withJavadocJar()
}

tasks.named('jar', Jar).configure {
	manifest {
		attributes([
				'Specification-Title'     : mod_id,
				'Specification-Vendor'    : "AnonymousHacker1279",
				'Specification-Version'   : '1',
				'Implementation-Title'    : project.name,
				'Implementation-Version'  : project.jar.archiveVersion,
				'Implementation-Vendor'   : "AnonymousHacker1279",
				'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}
}

artifacts {
	archives javadocJar
	archives sourcesJar
	archives jar
}

publishing {
	publications {
		register('mavenJava', MavenPublication) {
			artifact jar
			artifact sourcesJar
			artifact javadocJar
		}
	}
	repositories {
		maven {
			name "AnonymousHacker1279"

			def baseMavenUrl = "https://maven.anonymoushacker1279.tech/"
			url mod_version.contains("SNAPSHOT") ? baseMavenUrl + "snapshots" : baseMavenUrl + "releases"

			credentials(PasswordCredentials)
			authentication {
				basic(BasicAuthentication)
			}
		}
	}
}

if (file("RELEASE_NOTES.md").exists()) {
	publisher {
		apiKeys {
			// Load API keys from tokens.properties file
			def tokens = new Properties()
			file("tokens.properties").withInputStream {
				stream -> tokens.load(stream)
			}

			curseforge = tokens.getProperty("curseforge")
			modrinth = tokens.getProperty("modrinth")
		}

		setDebug(false)
		setCurseID("962538")
		setModrinthID("3WckE8A9")
		setGithubRepo("AnonymousHacker1279/CobaltConfig")
		setVersionType("release")
		// Read the contents of the RELEASE_NOTES.md file
		setChangelog(file("RELEASE_NOTES.md").text)
		// Get the version from the mod_version variable, it's the last part of the version string
		setVersion("v" + mod_version.split("-")[1])
		setDisplayName("Cobalt Config - v" + mod_version.split("-")[1])
		setGameVersions([minecraft_version])
		setLoaders("neoforge")
		setCurseEnvironment("both")
		setArtifact(tasks.jar)
		setJavaVersions([JavaVersion.VERSION_21])
		addAdditionalFile(javadocJar, sourcesJar)
	}
} else {
	println("No RELEASE_NOTES.md found, publishing outside of Maven is disabled.")
}

tasks.named('javadoc', Javadoc).configure {
	options {
		tags = [
				'reason:a:Mixin Reason'
		]
	}
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
	options.fork = true // Use a separate JVM process for Java compilation
}